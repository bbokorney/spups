List<Directions> directions = new ArrayList<Directions>();
HexLocation loc;
Space space;
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.placeIrrigationTileComponent(loc, new IrrigationTileComponent(new Tile(1)));
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.placeIrrigationTileComponent(loc, new IrrigationTileComponent(new Tile(1)));
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.placeIrrigationTileComponent(loc, new IrrigationTileComponent(new Tile(1)));
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToLowlands(loc);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.NORTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTH);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHEAST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
directions.add(Directions.SOUTHWEST);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
loc = new HexLocation(new ArrayList<Directions>(directions));
space = new JavaSpace();
board.placeSpace(loc, space);
board.addToHighlands(loc);
